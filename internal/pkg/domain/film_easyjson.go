// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson14b8084aDecode20212MAMBaInternalPkgDomain(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Body).UnmarshalJSON(data))
			}
		case "error":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Error).UnmarshalJSON(data))
			}
		case "status":
			out.Status = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncode20212MAMBaInternalPkgDomain(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Body) != 0 {
		const prefix string = ",\"body\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.Body).MarshalJSON())
	}
	if len(in.Error) != 0 {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Error).MarshalJSON())
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain(l, v)
}
func easyjson14b8084aDecode20212MAMBaInternalPkgDomain1(in *jlexer.Lexer, out *PostBookmarkResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "film_id":
			out.FilmID = uint64(in.Uint64())
		case "bookmarked":
			out.Bookmarked = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncode20212MAMBaInternalPkgDomain1(out *jwriter.Writer, in PostBookmarkResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"film_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.FilmID))
	}
	{
		const prefix string = ",\"bookmarked\":"
		out.RawString(prefix)
		out.Bool(bool(in.Bookmarked))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostBookmarkResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostBookmarkResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostBookmarkResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostBookmarkResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain1(l, v)
}
func easyjson14b8084aDecode20212MAMBaInternalPkgDomain2(in *jlexer.Lexer, out *NewRate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rating":
			out.Rating = in.JsonNumber()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncode20212MAMBaInternalPkgDomain2(out *jwriter.Writer, in NewRate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix[1:])
		out.String(string(in.Rating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewRate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewRate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewRate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewRate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain2(l, v)
}
func easyjson14b8084aDecode20212MAMBaInternalPkgDomain3(in *jlexer.Lexer, out *GenresList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "genres_list":
			if in.IsNull() {
				in.Skip()
				out.GenresList = nil
			} else {
				in.Delim('[')
				if out.GenresList == nil {
					if !in.IsDelim(']') {
						out.GenresList = make([]Genre, 0, 1)
					} else {
						out.GenresList = []Genre{}
					}
				} else {
					out.GenresList = (out.GenresList)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Genre
					(v1).UnmarshalEasyJSON(in)
					out.GenresList = append(out.GenresList, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncode20212MAMBaInternalPkgDomain3(out *jwriter.Writer, in GenresList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"genres_list\":"
		out.RawString(prefix[1:])
		if in.GenresList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.GenresList {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GenresList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GenresList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GenresList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GenresList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain3(l, v)
}
func easyjson14b8084aDecode20212MAMBaInternalPkgDomain4(in *jlexer.Lexer, out *GenreFilmList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "films":
			(out.FilmsList).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncode20212MAMBaInternalPkgDomain4(out *jwriter.Writer, in GenreFilmList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"films\":"
		out.RawString(prefix)
		(in.FilmsList).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GenreFilmList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GenreFilmList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GenreFilmList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GenreFilmList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain4(l, v)
}
func easyjson14b8084aDecode20212MAMBaInternalPkgDomain5(in *jlexer.Lexer, out *Genre) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "picture_url":
			out.PictureURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncode20212MAMBaInternalPkgDomain5(out *jwriter.Writer, in Genre) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.PictureURL != "" {
		const prefix string = ",\"picture_url\":"
		out.RawString(prefix)
		out.String(string(in.PictureURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Genre) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Genre) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Genre) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Genre) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain5(l, v)
}
func easyjson14b8084aDecode20212MAMBaInternalPkgDomain6(in *jlexer.Lexer, out *FilmReviews) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "review_list":
			if in.IsNull() {
				in.Skip()
				out.ReviewList = nil
			} else {
				in.Delim('[')
				if out.ReviewList == nil {
					if !in.IsDelim(']') {
						out.ReviewList = make([]Review, 0, 0)
					} else {
						out.ReviewList = []Review{}
					}
				} else {
					out.ReviewList = (out.ReviewList)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Review
					(v4).UnmarshalEasyJSON(in)
					out.ReviewList = append(out.ReviewList, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "more_available":
			out.MoreAvailable = bool(in.Bool())
		case "review_total":
			out.ReviewTotal = int(in.Int())
		case "current_sort":
			out.CurrentSort = string(in.String())
		case "current_limit":
			out.CurrentLimit = int(in.Int())
		case "current_skip":
			out.CurrentSkip = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncode20212MAMBaInternalPkgDomain6(out *jwriter.Writer, in FilmReviews) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"review_list\":"
		out.RawString(prefix[1:])
		if in.ReviewList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.ReviewList {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"more_available\":"
		out.RawString(prefix)
		out.Bool(bool(in.MoreAvailable))
	}
	{
		const prefix string = ",\"review_total\":"
		out.RawString(prefix)
		out.Int(int(in.ReviewTotal))
	}
	{
		const prefix string = ",\"current_sort\":"
		out.RawString(prefix)
		out.String(string(in.CurrentSort))
	}
	{
		const prefix string = ",\"current_limit\":"
		out.RawString(prefix)
		out.Int(int(in.CurrentLimit))
	}
	{
		const prefix string = ",\"current_skip\":"
		out.RawString(prefix)
		out.Int(int(in.CurrentSkip))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmReviews) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmReviews) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmReviews) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmReviews) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain6(l, v)
}
func easyjson14b8084aDecode20212MAMBaInternalPkgDomain7(in *jlexer.Lexer, out *FilmRecommendations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "recommendation_list":
			if in.IsNull() {
				in.Skip()
				out.RecommendationList = nil
			} else {
				in.Delim('[')
				if out.RecommendationList == nil {
					if !in.IsDelim(']') {
						out.RecommendationList = make([]Film, 0, 0)
					} else {
						out.RecommendationList = []Film{}
					}
				} else {
					out.RecommendationList = (out.RecommendationList)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Film
					(v7).UnmarshalEasyJSON(in)
					out.RecommendationList = append(out.RecommendationList, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "more_available":
			out.MoreAvailable = bool(in.Bool())
		case "recommendation_total":
			out.RecommendationTotal = int(in.Int())
		case "current_limit":
			out.CurrentLimit = int(in.Int())
		case "current_skip":
			out.CurrentSkip = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncode20212MAMBaInternalPkgDomain7(out *jwriter.Writer, in FilmRecommendations) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"recommendation_list\":"
		out.RawString(prefix[1:])
		if in.RecommendationList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.RecommendationList {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"more_available\":"
		out.RawString(prefix)
		out.Bool(bool(in.MoreAvailable))
	}
	{
		const prefix string = ",\"recommendation_total\":"
		out.RawString(prefix)
		out.Int(int(in.RecommendationTotal))
	}
	{
		const prefix string = ",\"current_limit\":"
		out.RawString(prefix)
		out.Int(int(in.CurrentLimit))
	}
	{
		const prefix string = ",\"current_skip\":"
		out.RawString(prefix)
		out.Int(int(in.CurrentSkip))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmRecommendations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmRecommendations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmRecommendations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmRecommendations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain7(l, v)
}
func easyjson14b8084aDecode20212MAMBaInternalPkgDomain8(in *jlexer.Lexer, out *FilmPageInfoJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "film":
			(out.FilmMain).UnmarshalEasyJSON(in)
		case "reviews":
			(out.Reviews).UnmarshalEasyJSON(in)
		case "recommendations":
			(out.Recommendations).UnmarshalEasyJSON(in)
		case "my_review":
			(out.MyReview).UnmarshalEasyJSON(in)
		case "bookmarked":
			out.Bookmarked = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncode20212MAMBaInternalPkgDomain8(out *jwriter.Writer, in FilmPageInfoJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"film\":"
		out.RawString(prefix[1:])
		(in.FilmMain).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"reviews\":"
		out.RawString(prefix)
		(in.Reviews).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"recommendations\":"
		out.RawString(prefix)
		(in.Recommendations).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"my_review\":"
		out.RawString(prefix)
		(in.MyReview).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"bookmarked\":"
		out.RawString(prefix)
		out.Bool(bool(in.Bookmarked))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmPageInfoJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmPageInfoJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmPageInfoJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmPageInfoJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain8(l, v)
}
func easyjson14b8084aDecode20212MAMBaInternalPkgDomain9(in *jlexer.Lexer, out *FilmPageInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "film":
			if in.IsNull() {
				in.Skip()
				out.FilmMain = nil
			} else {
				if out.FilmMain == nil {
					out.FilmMain = new(Film)
				}
				(*out.FilmMain).UnmarshalEasyJSON(in)
			}
		case "reviews":
			(out.Reviews).UnmarshalEasyJSON(in)
		case "recommendations":
			(out.Recommendations).UnmarshalEasyJSON(in)
		case "my_review":
			(out.MyReview).UnmarshalEasyJSON(in)
		case "bookmarked":
			out.Bookmarked = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncode20212MAMBaInternalPkgDomain9(out *jwriter.Writer, in FilmPageInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"film\":"
		out.RawString(prefix[1:])
		if in.FilmMain == nil {
			out.RawString("null")
		} else {
			(*in.FilmMain).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"reviews\":"
		out.RawString(prefix)
		(in.Reviews).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"recommendations\":"
		out.RawString(prefix)
		(in.Recommendations).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"my_review\":"
		out.RawString(prefix)
		(in.MyReview).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"bookmarked\":"
		out.RawString(prefix)
		out.Bool(bool(in.Bookmarked))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmPageInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmPageInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmPageInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmPageInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain9(l, v)
}
func easyjson14b8084aDecode20212MAMBaInternalPkgDomain10(in *jlexer.Lexer, out *FilmJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "title":
			out.Title = string(in.String())
		case "title_original":
			out.TitleOriginal = string(in.String())
		case "rating":
			out.Rating = in.JsonNumber()
		case "description":
			out.Description = string(in.String())
		case "total_revenue":
			out.TotalRevenue = string(in.String())
		case "poster_url":
			out.PosterUrl = string(in.String())
		case "trailer_url":
			out.TrailerUrl = string(in.String())
		case "content_type":
			out.ContentType = string(in.String())
		case "release_year":
			out.ReleaseYear = int(in.Int())
		case "duration":
			out.Duration = int(in.Int())
		case "premiere_ru":
			out.PremiereRu = string(in.String())
		case "origin_countries":
			if in.IsNull() {
				in.Skip()
				out.OriginCountries = nil
			} else {
				in.Delim('[')
				if out.OriginCountries == nil {
					if !in.IsDelim(']') {
						out.OriginCountries = make([]string, 0, 4)
					} else {
						out.OriginCountries = []string{}
					}
				} else {
					out.OriginCountries = (out.OriginCountries)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.OriginCountries = append(out.OriginCountries, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cast":
			if in.IsNull() {
				in.Skip()
				out.Cast = nil
			} else {
				in.Delim('[')
				if out.Cast == nil {
					if !in.IsDelim(']') {
						out.Cast = make([]Person, 0, 0)
					} else {
						out.Cast = []Person{}
					}
				} else {
					out.Cast = (out.Cast)[:0]
				}
				for !in.IsDelim(']') {
					var v11 Person
					(v11).UnmarshalEasyJSON(in)
					out.Cast = append(out.Cast, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "director":
			(out.Director).UnmarshalEasyJSON(in)
		case "screenwriter":
			(out.Screenwriter).UnmarshalEasyJSON(in)
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]Genre, 0, 1)
					} else {
						out.Genres = []Genre{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v12 Genre
					(v12).UnmarshalEasyJSON(in)
					out.Genres = append(out.Genres, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncode20212MAMBaInternalPkgDomain10(out *jwriter.Writer, in FilmJson) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.TitleOriginal != "" {
		const prefix string = ",\"title_original\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TitleOriginal))
	}
	{
		const prefix string = ",\"rating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Rating))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if in.TotalRevenue != "" {
		const prefix string = ",\"total_revenue\":"
		out.RawString(prefix)
		out.String(string(in.TotalRevenue))
	}
	if in.PosterUrl != "" {
		const prefix string = ",\"poster_url\":"
		out.RawString(prefix)
		out.String(string(in.PosterUrl))
	}
	if in.TrailerUrl != "" {
		const prefix string = ",\"trailer_url\":"
		out.RawString(prefix)
		out.String(string(in.TrailerUrl))
	}
	if in.ContentType != "" {
		const prefix string = ",\"content_type\":"
		out.RawString(prefix)
		out.String(string(in.ContentType))
	}
	if in.ReleaseYear != 0 {
		const prefix string = ",\"release_year\":"
		out.RawString(prefix)
		out.Int(int(in.ReleaseYear))
	}
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int(int(in.Duration))
	}
	if in.PremiereRu != "" {
		const prefix string = ",\"premiere_ru\":"
		out.RawString(prefix)
		out.String(string(in.PremiereRu))
	}
	if len(in.OriginCountries) != 0 {
		const prefix string = ",\"origin_countries\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v13, v14 := range in.OriginCountries {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	if len(in.Cast) != 0 {
		const prefix string = ",\"cast\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v15, v16 := range in.Cast {
				if v15 > 0 {
					out.RawByte(',')
				}
				(v16).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"director\":"
		out.RawString(prefix)
		(in.Director).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"screenwriter\":"
		out.RawString(prefix)
		(in.Screenwriter).MarshalEasyJSON(out)
	}
	if len(in.Genres) != 0 {
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.Genres {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain10(l, v)
}
func easyjson14b8084aDecode20212MAMBaInternalPkgDomain11(in *jlexer.Lexer, out *FilmBookmarks) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bookmarks_list":
			if in.IsNull() {
				in.Skip()
				out.FilmsList = nil
			} else {
				in.Delim('[')
				if out.FilmsList == nil {
					if !in.IsDelim(']') {
						out.FilmsList = make([]Film, 0, 0)
					} else {
						out.FilmsList = []Film{}
					}
				} else {
					out.FilmsList = (out.FilmsList)[:0]
				}
				for !in.IsDelim(']') {
					var v19 Film
					(v19).UnmarshalEasyJSON(in)
					out.FilmsList = append(out.FilmsList, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "more_available":
			out.MoreAvailable = bool(in.Bool())
		case "films_total":
			out.FilmsTotal = int(in.Int())
		case "current_sort":
			out.CurrentSort = string(in.String())
		case "current_limit":
			out.CurrentLimit = int(in.Int())
		case "current_skip":
			out.CurrentSkip = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncode20212MAMBaInternalPkgDomain11(out *jwriter.Writer, in FilmBookmarks) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bookmarks_list\":"
		out.RawString(prefix[1:])
		if in.FilmsList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.FilmsList {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"more_available\":"
		out.RawString(prefix)
		out.Bool(bool(in.MoreAvailable))
	}
	{
		const prefix string = ",\"films_total\":"
		out.RawString(prefix)
		out.Int(int(in.FilmsTotal))
	}
	{
		const prefix string = ",\"current_sort\":"
		out.RawString(prefix)
		out.String(string(in.CurrentSort))
	}
	{
		const prefix string = ",\"current_limit\":"
		out.RawString(prefix)
		out.Int(int(in.CurrentLimit))
	}
	{
		const prefix string = ",\"current_skip\":"
		out.RawString(prefix)
		out.Int(int(in.CurrentSkip))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmBookmarks) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmBookmarks) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmBookmarks) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmBookmarks) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain11(l, v)
}
func easyjson14b8084aDecode20212MAMBaInternalPkgDomain12(in *jlexer.Lexer, out *Film) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "title":
			out.Title = string(in.String())
		case "title_original":
			out.TitleOriginal = string(in.String())
		case "rating":
			out.Rating = float64(in.Float64())
		case "description":
			out.Description = string(in.String())
		case "total_revenue":
			out.TotalRevenue = string(in.String())
		case "poster_url":
			out.PosterUrl = string(in.String())
		case "trailer_url":
			out.TrailerUrl = string(in.String())
		case "content_type":
			out.ContentType = string(in.String())
		case "release_year":
			out.ReleaseYear = int(in.Int())
		case "duration":
			out.Duration = int(in.Int())
		case "premiere_ru":
			out.PremiereRu = string(in.String())
		case "origin_countries":
			if in.IsNull() {
				in.Skip()
				out.OriginCountries = nil
			} else {
				in.Delim('[')
				if out.OriginCountries == nil {
					if !in.IsDelim(']') {
						out.OriginCountries = make([]string, 0, 4)
					} else {
						out.OriginCountries = []string{}
					}
				} else {
					out.OriginCountries = (out.OriginCountries)[:0]
				}
				for !in.IsDelim(']') {
					var v22 string
					v22 = string(in.String())
					out.OriginCountries = append(out.OriginCountries, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cast":
			if in.IsNull() {
				in.Skip()
				out.Cast = nil
			} else {
				in.Delim('[')
				if out.Cast == nil {
					if !in.IsDelim(']') {
						out.Cast = make([]Person, 0, 0)
					} else {
						out.Cast = []Person{}
					}
				} else {
					out.Cast = (out.Cast)[:0]
				}
				for !in.IsDelim(']') {
					var v23 Person
					(v23).UnmarshalEasyJSON(in)
					out.Cast = append(out.Cast, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "director":
			(out.Director).UnmarshalEasyJSON(in)
		case "screenwriter":
			(out.Screenwriter).UnmarshalEasyJSON(in)
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]Genre, 0, 1)
					} else {
						out.Genres = []Genre{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v24 Genre
					(v24).UnmarshalEasyJSON(in)
					out.Genres = append(out.Genres, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncode20212MAMBaInternalPkgDomain12(out *jwriter.Writer, in Film) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.TitleOriginal != "" {
		const prefix string = ",\"title_original\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TitleOriginal))
	}
	if in.Rating != 0 {
		const prefix string = ",\"rating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Rating))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.TotalRevenue != "" {
		const prefix string = ",\"total_revenue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TotalRevenue))
	}
	if in.PosterUrl != "" {
		const prefix string = ",\"poster_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PosterUrl))
	}
	if in.TrailerUrl != "" {
		const prefix string = ",\"trailer_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TrailerUrl))
	}
	if in.ContentType != "" {
		const prefix string = ",\"content_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContentType))
	}
	if in.ReleaseYear != 0 {
		const prefix string = ",\"release_year\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReleaseYear))
	}
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Duration))
	}
	if in.PremiereRu != "" {
		const prefix string = ",\"premiere_ru\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PremiereRu))
	}
	if len(in.OriginCountries) != 0 {
		const prefix string = ",\"origin_countries\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v25, v26 := range in.OriginCountries {
				if v25 > 0 {
					out.RawByte(',')
				}
				out.String(string(v26))
			}
			out.RawByte(']')
		}
	}
	if len(in.Cast) != 0 {
		const prefix string = ",\"cast\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v27, v28 := range in.Cast {
				if v27 > 0 {
					out.RawByte(',')
				}
				(v28).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"director\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Director).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"screenwriter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Screenwriter).MarshalEasyJSON(out)
	}
	if len(in.Genres) != 0 {
		const prefix string = ",\"genres\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Genres {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Film) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Film) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Film) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Film) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain12(l, v)
}
func easyjson14b8084aDecode20212MAMBaInternalPkgDomain13(in *jlexer.Lexer, out *Country) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "country_name":
			out.CountryName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncode20212MAMBaInternalPkgDomain13(out *jwriter.Writer, in Country) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"country_name\":"
		out.RawString(prefix)
		out.String(string(in.CountryName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Country) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Country) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Country) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Country) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain13(l, v)
}
func easyjson14b8084aDecode20212MAMBaInternalPkgDomain14(in *jlexer.Lexer, out *BannersList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "banners_list":
			if in.IsNull() {
				in.Skip()
				out.BannersList = nil
			} else {
				in.Delim('[')
				if out.BannersList == nil {
					if !in.IsDelim(']') {
						out.BannersList = make([]Banner, 0, 0)
					} else {
						out.BannersList = []Banner{}
					}
				} else {
					out.BannersList = (out.BannersList)[:0]
				}
				for !in.IsDelim(']') {
					var v31 Banner
					(v31).UnmarshalEasyJSON(in)
					out.BannersList = append(out.BannersList, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncode20212MAMBaInternalPkgDomain14(out *jwriter.Writer, in BannersList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"banners_list\":"
		out.RawString(prefix[1:])
		if in.BannersList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.BannersList {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BannersList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BannersList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BannersList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BannersList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain14(l, v)
}
func easyjson14b8084aDecode20212MAMBaInternalPkgDomain15(in *jlexer.Lexer, out *Banner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "picture_url":
			out.PictureURL = string(in.String())
		case "link":
			out.Link = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncode20212MAMBaInternalPkgDomain15(out *jwriter.Writer, in Banner) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if in.PictureURL != "" {
		const prefix string = ",\"picture_url\":"
		out.RawString(prefix)
		out.String(string(in.PictureURL))
	}
	if in.Link != "" {
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Banner) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Banner) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncode20212MAMBaInternalPkgDomain15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Banner) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Banner) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecode20212MAMBaInternalPkgDomain15(l, v)
}
