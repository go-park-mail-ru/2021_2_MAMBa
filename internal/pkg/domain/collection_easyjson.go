// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson31a05f68Decode20212MAMBaInternalPkgDomain(in *jlexer.Lexer, out *Collections) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "collections_list":
			if in.IsNull() {
				in.Skip()
				out.CollArray = nil
			} else {
				in.Delim('[')
				if out.CollArray == nil {
					if !in.IsDelim(']') {
						out.CollArray = make([]CollectionPreview, 0, 1)
					} else {
						out.CollArray = []CollectionPreview{}
					}
				} else {
					out.CollArray = (out.CollArray)[:0]
				}
				for !in.IsDelim(']') {
					var v1 CollectionPreview
					(v1).UnmarshalEasyJSON(in)
					out.CollArray = append(out.CollArray, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "more_available":
			out.MoreAvailable = bool(in.Bool())
		case "collection_total":
			out.CollectionTotal = int(in.Int())
		case "current_sort":
			out.CurrentSort = string(in.String())
		case "current_limit":
			out.CurrentLimit = int(in.Int())
		case "current_skip":
			out.CurrentSkip = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson31a05f68Encode20212MAMBaInternalPkgDomain(out *jwriter.Writer, in Collections) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"collections_list\":"
		out.RawString(prefix[1:])
		if in.CollArray == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.CollArray {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"more_available\":"
		out.RawString(prefix)
		out.Bool(bool(in.MoreAvailable))
	}
	{
		const prefix string = ",\"collection_total\":"
		out.RawString(prefix)
		out.Int(int(in.CollectionTotal))
	}
	{
		const prefix string = ",\"current_sort\":"
		out.RawString(prefix)
		out.String(string(in.CurrentSort))
	}
	{
		const prefix string = ",\"current_limit\":"
		out.RawString(prefix)
		out.Int(int(in.CurrentLimit))
	}
	{
		const prefix string = ",\"current_skip\":"
		out.RawString(prefix)
		out.Int(int(in.CurrentSkip))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Collections) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson31a05f68Encode20212MAMBaInternalPkgDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Collections) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson31a05f68Encode20212MAMBaInternalPkgDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Collections) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson31a05f68Decode20212MAMBaInternalPkgDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Collections) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson31a05f68Decode20212MAMBaInternalPkgDomain(l, v)
}
func easyjson31a05f68Decode20212MAMBaInternalPkgDomain1(in *jlexer.Lexer, out *CollectionPreview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "title":
			out.Title = string(in.String())
		case "picture_url":
			out.PictureUrl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson31a05f68Encode20212MAMBaInternalPkgDomain1(out *jwriter.Writer, in CollectionPreview) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"picture_url\":"
		out.RawString(prefix)
		out.String(string(in.PictureUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CollectionPreview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson31a05f68Encode20212MAMBaInternalPkgDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CollectionPreview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson31a05f68Encode20212MAMBaInternalPkgDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CollectionPreview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson31a05f68Decode20212MAMBaInternalPkgDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CollectionPreview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson31a05f68Decode20212MAMBaInternalPkgDomain1(l, v)
}
func easyjson31a05f68Decode20212MAMBaInternalPkgDomain2(in *jlexer.Lexer, out *CollectionPage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "films":
			if in.IsNull() {
				in.Skip()
				out.Films = nil
			} else {
				in.Delim('[')
				if out.Films == nil {
					if !in.IsDelim(']') {
						out.Films = make([]Film, 0, 0)
					} else {
						out.Films = []Film{}
					}
				} else {
					out.Films = (out.Films)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Film
					easyjson31a05f68Decode20212MAMBaInternalPkgDomain3(in, &v4)
					out.Films = append(out.Films, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "collection":
			(out.Coll).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson31a05f68Encode20212MAMBaInternalPkgDomain2(out *jwriter.Writer, in CollectionPage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"films\":"
		out.RawString(prefix[1:])
		if in.Films == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Films {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Raw((v6).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"collection\":"
		out.RawString(prefix)
		(in.Coll).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CollectionPage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson31a05f68Encode20212MAMBaInternalPkgDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CollectionPage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson31a05f68Encode20212MAMBaInternalPkgDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CollectionPage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson31a05f68Decode20212MAMBaInternalPkgDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CollectionPage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson31a05f68Decode20212MAMBaInternalPkgDomain2(l, v)
}
func easyjson31a05f68Decode20212MAMBaInternalPkgDomain3(in *jlexer.Lexer, out *Film) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "title":
			out.Title = string(in.String())
		case "title_original":
			out.TitleOriginal = string(in.String())
		case "rating":
			out.Rating = float64(in.Float64())
		case "description":
			out.Description = string(in.String())
		case "total_revenue":
			out.TotalRevenue = string(in.String())
		case "poster_url":
			out.PosterUrl = string(in.String())
		case "trailer_url":
			out.TrailerUrl = string(in.String())
		case "content_type":
			out.ContentType = string(in.String())
		case "release_year":
			out.ReleaseYear = int(in.Int())
		case "duration":
			out.Duration = int(in.Int())
		case "premiere_ru":
			out.PremiereRu = string(in.String())
		case "origin_countries":
			if in.IsNull() {
				in.Skip()
				out.OriginCountries = nil
			} else {
				in.Delim('[')
				if out.OriginCountries == nil {
					if !in.IsDelim(']') {
						out.OriginCountries = make([]string, 0, 4)
					} else {
						out.OriginCountries = []string{}
					}
				} else {
					out.OriginCountries = (out.OriginCountries)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.OriginCountries = append(out.OriginCountries, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cast":
			if in.IsNull() {
				in.Skip()
				out.Cast = nil
			} else {
				in.Delim('[')
				if out.Cast == nil {
					if !in.IsDelim(']') {
						out.Cast = make([]Person, 0, 0)
					} else {
						out.Cast = []Person{}
					}
				} else {
					out.Cast = (out.Cast)[:0]
				}
				for !in.IsDelim(']') {
					var v8 Person
					(v8).UnmarshalEasyJSON(in)
					out.Cast = append(out.Cast, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "director":
			(out.Director).UnmarshalEasyJSON(in)
		case "screenwriter":
			(out.Screenwriter).UnmarshalEasyJSON(in)
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]Genre, 0, 1)
					} else {
						out.Genres = []Genre{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v9 Genre
					easyjson31a05f68Decode20212MAMBaInternalPkgDomain4(in, &v9)
					out.Genres = append(out.Genres, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson31a05f68Encode20212MAMBaInternalPkgDomain3(out *jwriter.Writer, in Film) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.TitleOriginal != "" {
		const prefix string = ",\"title_original\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TitleOriginal))
	}
	if in.Rating != 0 {
		const prefix string = ",\"rating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Rating))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.TotalRevenue != "" {
		const prefix string = ",\"total_revenue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TotalRevenue))
	}
	if in.PosterUrl != "" {
		const prefix string = ",\"poster_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PosterUrl))
	}
	if in.TrailerUrl != "" {
		const prefix string = ",\"trailer_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TrailerUrl))
	}
	if in.ContentType != "" {
		const prefix string = ",\"content_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContentType))
	}
	if in.ReleaseYear != 0 {
		const prefix string = ",\"release_year\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ReleaseYear))
	}
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Duration))
	}
	if in.PremiereRu != "" {
		const prefix string = ",\"premiere_ru\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PremiereRu))
	}
	if len(in.OriginCountries) != 0 {
		const prefix string = ",\"origin_countries\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.OriginCountries {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	if len(in.Cast) != 0 {
		const prefix string = ",\"cast\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.Cast {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"director\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Director).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"screenwriter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Screenwriter).MarshalEasyJSON(out)
	}
	if len(in.Genres) != 0 {
		const prefix string = ",\"genres\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Genres {
				if v14 > 0 {
					out.RawByte(',')
				}
				easyjson31a05f68Encode20212MAMBaInternalPkgDomain4(out, v15)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson31a05f68Decode20212MAMBaInternalPkgDomain4(in *jlexer.Lexer, out *Genre) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "picture_url":
			out.PictureURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson31a05f68Encode20212MAMBaInternalPkgDomain4(out *jwriter.Writer, in Genre) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.PictureURL != "" {
		const prefix string = ",\"picture_url\":"
		out.RawString(prefix)
		out.String(string(in.PictureURL))
	}
	out.RawByte('}')
}
func easyjson31a05f68Decode20212MAMBaInternalPkgDomain5(in *jlexer.Lexer, out *Collection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "auth_id":
			out.AuthId = uint64(in.Uint64())
		case "collection_name":
			out.CollName = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "creation_time":
			out.CreationTime = string(in.String())
		case "picture_url":
			out.PicUrl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson31a05f68Encode20212MAMBaInternalPkgDomain5(out *jwriter.Writer, in Collection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"auth_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.AuthId))
	}
	{
		const prefix string = ",\"collection_name\":"
		out.RawString(prefix)
		out.String(string(in.CollName))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"creation_time\":"
		out.RawString(prefix)
		out.String(string(in.CreationTime))
	}
	{
		const prefix string = ",\"picture_url\":"
		out.RawString(prefix)
		out.String(string(in.PicUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Collection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson31a05f68Encode20212MAMBaInternalPkgDomain5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Collection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson31a05f68Encode20212MAMBaInternalPkgDomain5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Collection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson31a05f68Decode20212MAMBaInternalPkgDomain5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Collection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson31a05f68Decode20212MAMBaInternalPkgDomain5(l, v)
}
