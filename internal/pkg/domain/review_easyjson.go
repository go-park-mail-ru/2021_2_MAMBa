// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2f096870Decode20212MAMBaInternalPkgDomain(in *jlexer.Lexer, out *Review) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "film_id":
			out.FilmId = uint64(in.Uint64())
		case "film_title_ru":
			out.FilmTitleRu = string(in.String())
		case "film_title_original":
			out.FilmTitleOriginal = string(in.String())
		case "film_picture_url":
			out.FilmPictureUrl = string(in.String())
		case "author_id":
			out.AuthorId = uint64(in.Uint64())
		case "author_name":
			out.AuthorName = string(in.String())
		case "author_picture_url":
			out.AuthorPictureUrl = string(in.String())
		case "review_text":
			out.ReviewText = string(in.String())
		case "review_type":
			out.ReviewType = int(in.Int())
		case "stars":
			out.Stars = float64(in.Float64())
		case "date":
			out.Date = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f096870Encode20212MAMBaInternalPkgDomain(out *jwriter.Writer, in Review) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"film_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.FilmId))
	}
	if in.FilmTitleRu != "" {
		const prefix string = ",\"film_title_ru\":"
		out.RawString(prefix)
		out.String(string(in.FilmTitleRu))
	}
	if in.FilmTitleOriginal != "" {
		const prefix string = ",\"film_title_original\":"
		out.RawString(prefix)
		out.String(string(in.FilmTitleOriginal))
	}
	if in.FilmPictureUrl != "" {
		const prefix string = ",\"film_picture_url\":"
		out.RawString(prefix)
		out.String(string(in.FilmPictureUrl))
	}
	if in.AuthorId != 0 {
		const prefix string = ",\"author_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.AuthorId))
	}
	if in.AuthorName != "" {
		const prefix string = ",\"author_name\":"
		out.RawString(prefix)
		out.String(string(in.AuthorName))
	}
	if in.AuthorPictureUrl != "" {
		const prefix string = ",\"author_picture_url\":"
		out.RawString(prefix)
		out.String(string(in.AuthorPictureUrl))
	}
	if in.ReviewText != "" {
		const prefix string = ",\"review_text\":"
		out.RawString(prefix)
		out.String(string(in.ReviewText))
	}
	{
		const prefix string = ",\"review_type\":"
		out.RawString(prefix)
		out.Int(int(in.ReviewType))
	}
	{
		const prefix string = ",\"stars\":"
		out.RawString(prefix)
		out.Float64(float64(in.Stars))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Date))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Review) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f096870Encode20212MAMBaInternalPkgDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Review) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f096870Encode20212MAMBaInternalPkgDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Review) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f096870Decode20212MAMBaInternalPkgDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Review) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f096870Decode20212MAMBaInternalPkgDomain(l, v)
}
