// Code generated by MockGen. DO NOT EDIT.
// Source: 2021_2_MAMBa/internal/pkg/domain (interfaces: SearchRepository)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSearchRepository is a mock of SearchRepository interface.
type MockSearchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSearchRepositoryMockRecorder
}

// MockSearchRepositoryMockRecorder is the mock recorder for MockSearchRepository.
type MockSearchRepositoryMockRecorder struct {
	mock *MockSearchRepository
}

// NewMockSearchRepository creates a new mock instance.
func NewMockSearchRepository(ctrl *gomock.Controller) *MockSearchRepository {
	mock := &MockSearchRepository{ctrl: ctrl}
	mock.recorder = &MockSearchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchRepository) EXPECT() *MockSearchRepositoryMockRecorder {
	return m.recorder
}

// CountFoundFilms mocks base method.
func (m *MockSearchRepository) CountFoundFilms(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFoundFilms", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountFoundFilms indicates an expected call of CountFoundFilms.
func (mr *MockSearchRepositoryMockRecorder) CountFoundFilms(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFoundFilms", reflect.TypeOf((*MockSearchRepository)(nil).CountFoundFilms), arg0)
}

// CountFoundPersons mocks base method.
func (m *MockSearchRepository) CountFoundPersons(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFoundPersons", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountFoundPersons indicates an expected call of CountFoundPersons.
func (mr *MockSearchRepositoryMockRecorder) CountFoundPersons(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFoundPersons", reflect.TypeOf((*MockSearchRepository)(nil).CountFoundPersons), arg0)
}

// SearchFilmsIDList mocks base method.
func (m *MockSearchRepository) SearchFilmsIDList(arg0 string, arg1, arg2 int) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilmsIDList", arg0, arg1, arg2)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFilmsIDList indicates an expected call of SearchFilmsIDList.
func (mr *MockSearchRepositoryMockRecorder) SearchFilmsIDList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilmsIDList", reflect.TypeOf((*MockSearchRepository)(nil).SearchFilmsIDList), arg0, arg1, arg2)
}

// SearchPersonsIDList mocks base method.
func (m *MockSearchRepository) SearchPersonsIDList(arg0 string, arg1, arg2 int) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPersonsIDList", arg0, arg1, arg2)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPersonsIDList indicates an expected call of SearchPersonsIDList.
func (mr *MockSearchRepositoryMockRecorder) SearchPersonsIDList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPersonsIDList", reflect.TypeOf((*MockSearchRepository)(nil).SearchPersonsIDList), arg0, arg1, arg2)
}
